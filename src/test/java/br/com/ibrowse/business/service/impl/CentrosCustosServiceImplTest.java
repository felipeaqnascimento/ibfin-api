/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.ibrowse.bean.CentrosCustos;
import br.com.ibrowse.bean.jpa.CentrosCustosEntity;
import br.com.ibrowse.business.service.mapping.CentrosCustosServiceMapper;
import br.com.ibrowse.data.repository.jpa.CentrosCustosJpaRepository;
import br.com.ibrowse.test.CentrosCustosEntityFactoryForTest;
import br.com.ibrowse.test.CentrosCustosFactoryForTest;
import br.com.ibrowse.test.MockValues;

/**
 * Test : Implementation of CentrosCustosService
 */
@RunWith(MockitoJUnitRunner.class)
public class CentrosCustosServiceImplTest {

	@InjectMocks
	private CentrosCustosServiceImpl centrosCustosService;
	@Mock
	private CentrosCustosJpaRepository centrosCustosJpaRepository;
	@Mock
	private CentrosCustosServiceMapper centrosCustosServiceMapper;
	
	private CentrosCustosFactoryForTest centrosCustosFactoryForTest = new CentrosCustosFactoryForTest();

	private CentrosCustosEntityFactoryForTest centrosCustosEntityFactoryForTest = new CentrosCustosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long oidCentrosCustos = mockValues.nextLong();
		
		CentrosCustosEntity centrosCustosEntity = centrosCustosJpaRepository.findOne(oidCentrosCustos);
		
		CentrosCustos centrosCustos = centrosCustosFactoryForTest.newCentrosCustos();
		when(centrosCustosServiceMapper.mapCentrosCustosEntityToCentrosCustos(centrosCustosEntity)).thenReturn(centrosCustos);

		// When
		CentrosCustos centrosCustosFound = centrosCustosService.findById(oidCentrosCustos);

		// Then
		assertEquals(centrosCustos.getOidCentrosCustos(),centrosCustosFound.getOidCentrosCustos());
	}

	@Test
	public void findAll() {
		// Given
		List<CentrosCustosEntity> centrosCustosEntitys = new ArrayList<CentrosCustosEntity>();
		CentrosCustosEntity centrosCustosEntity1 = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		centrosCustosEntitys.add(centrosCustosEntity1);
		CentrosCustosEntity centrosCustosEntity2 = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		centrosCustosEntitys.add(centrosCustosEntity2);
		when(centrosCustosJpaRepository.findAll()).thenReturn(centrosCustosEntitys);
		
		CentrosCustos centrosCustos1 = centrosCustosFactoryForTest.newCentrosCustos();
		when(centrosCustosServiceMapper.mapCentrosCustosEntityToCentrosCustos(centrosCustosEntity1)).thenReturn(centrosCustos1);
		CentrosCustos centrosCustos2 = centrosCustosFactoryForTest.newCentrosCustos();
		when(centrosCustosServiceMapper.mapCentrosCustosEntityToCentrosCustos(centrosCustosEntity2)).thenReturn(centrosCustos2);

		// When
		List<CentrosCustos> centrosCustossFounds = centrosCustosService.findAll();

		// Then
		assertTrue(centrosCustos1 == centrosCustossFounds.get(0));
		assertTrue(centrosCustos2 == centrosCustossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		CentrosCustos centrosCustos = centrosCustosFactoryForTest.newCentrosCustos();

		CentrosCustosEntity centrosCustosEntity = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		when(centrosCustosJpaRepository.findOne(centrosCustos.getOidCentrosCustos())).thenReturn(null);
		
		centrosCustosEntity = new CentrosCustosEntity();
		centrosCustosServiceMapper.mapCentrosCustosToCentrosCustosEntity(centrosCustos, centrosCustosEntity);
		CentrosCustosEntity centrosCustosEntitySaved = centrosCustosJpaRepository.save(centrosCustosEntity);
		
		CentrosCustos centrosCustosSaved = centrosCustosFactoryForTest.newCentrosCustos();
		when(centrosCustosServiceMapper.mapCentrosCustosEntityToCentrosCustos(centrosCustosEntitySaved)).thenReturn(centrosCustosSaved);

		// When
		CentrosCustos centrosCustosResult = centrosCustosService.create(centrosCustos);

		// Then
		assertTrue(centrosCustosResult == centrosCustosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		CentrosCustos centrosCustos = centrosCustosFactoryForTest.newCentrosCustos();

		CentrosCustosEntity centrosCustosEntity = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		when(centrosCustosJpaRepository.findOne(centrosCustos.getOidCentrosCustos())).thenReturn(centrosCustosEntity);

		// When
		Exception exception = null;
		try {
			centrosCustosService.create(centrosCustos);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		CentrosCustos centrosCustos = centrosCustosFactoryForTest.newCentrosCustos();

		CentrosCustosEntity centrosCustosEntity = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		when(centrosCustosJpaRepository.findOne(centrosCustos.getOidCentrosCustos())).thenReturn(centrosCustosEntity);
		
		CentrosCustosEntity centrosCustosEntitySaved = centrosCustosEntityFactoryForTest.newCentrosCustosEntity();
		when(centrosCustosJpaRepository.save(centrosCustosEntity)).thenReturn(centrosCustosEntitySaved);
		
		CentrosCustos centrosCustosSaved = centrosCustosFactoryForTest.newCentrosCustos();
		when(centrosCustosServiceMapper.mapCentrosCustosEntityToCentrosCustos(centrosCustosEntitySaved)).thenReturn(centrosCustosSaved);

		// When
		CentrosCustos centrosCustosResult = centrosCustosService.update(centrosCustos);

		// Then
		verify(centrosCustosServiceMapper).mapCentrosCustosToCentrosCustosEntity(centrosCustos, centrosCustosEntity);
		assertTrue(centrosCustosResult == centrosCustosSaved);
	}

	@Test
	public void delete() {
		// Given
		Long oidCentrosCustos = mockValues.nextLong();

		// When
		centrosCustosService.delete(oidCentrosCustos);

		// Then
		verify(centrosCustosJpaRepository).delete(oidCentrosCustos);
		
	}

}
