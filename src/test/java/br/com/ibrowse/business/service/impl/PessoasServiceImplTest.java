/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.ibrowse.bean.Pessoas;
import br.com.ibrowse.bean.jpa.PessoasEntity;
import br.com.ibrowse.business.service.mapping.PessoasServiceMapper;
import br.com.ibrowse.data.repository.jpa.PessoasJpaRepository;
import br.com.ibrowse.test.MockValues;
import br.com.ibrowse.test.PessoasEntityFactoryForTest;
import br.com.ibrowse.test.PessoasFactoryForTest;

/**
 * Test : Implementation of PessoasService
 */
@RunWith(MockitoJUnitRunner.class)
public class PessoasServiceImplTest {

	@InjectMocks
	private PessoasServiceImpl pessoasService;
	@Mock
	private PessoasJpaRepository pessoasJpaRepository;
	@Mock
	private PessoasServiceMapper pessoasServiceMapper;
	
	private PessoasFactoryForTest pessoasFactoryForTest = new PessoasFactoryForTest();

	private PessoasEntityFactoryForTest pessoasEntityFactoryForTest = new PessoasEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long oidPessoas = mockValues.nextLong();
		
		PessoasEntity pessoasEntity = pessoasJpaRepository.findOne(oidPessoas);
		
		Pessoas pessoas = pessoasFactoryForTest.newPessoas();
		when(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity)).thenReturn(pessoas);

		// When
		Pessoas pessoasFound = pessoasService.findById(oidPessoas);

		// Then
		assertEquals(pessoas.getOidPessoas(),pessoasFound.getOidPessoas());
	}

	@Test
	public void findAll() {
		// Given
		List<PessoasEntity> pessoasEntitys = new ArrayList<PessoasEntity>();
		PessoasEntity pessoasEntity1 = pessoasEntityFactoryForTest.newPessoasEntity();
		pessoasEntitys.add(pessoasEntity1);
		PessoasEntity pessoasEntity2 = pessoasEntityFactoryForTest.newPessoasEntity();
		pessoasEntitys.add(pessoasEntity2);
		when(pessoasJpaRepository.findAll()).thenReturn(pessoasEntitys);
		
		Pessoas pessoas1 = pessoasFactoryForTest.newPessoas();
		when(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity1)).thenReturn(pessoas1);
		Pessoas pessoas2 = pessoasFactoryForTest.newPessoas();
		when(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity2)).thenReturn(pessoas2);

		// When
		List<Pessoas> pessoassFounds = pessoasService.findAll();

		// Then
		assertTrue(pessoas1 == pessoassFounds.get(0));
		assertTrue(pessoas2 == pessoassFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Pessoas pessoas = pessoasFactoryForTest.newPessoas();

		PessoasEntity pessoasEntity = pessoasEntityFactoryForTest.newPessoasEntity();
		when(pessoasJpaRepository.findOne(pessoas.getOidPessoas())).thenReturn(null);
		
		pessoasEntity = new PessoasEntity();
		pessoasServiceMapper.mapPessoasToPessoasEntity(pessoas, pessoasEntity);
		PessoasEntity pessoasEntitySaved = pessoasJpaRepository.save(pessoasEntity);
		
		Pessoas pessoasSaved = pessoasFactoryForTest.newPessoas();
		when(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntitySaved)).thenReturn(pessoasSaved);

		// When
		Pessoas pessoasResult = pessoasService.create(pessoas);

		// Then
		assertTrue(pessoasResult == pessoasSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Pessoas pessoas = pessoasFactoryForTest.newPessoas();

		PessoasEntity pessoasEntity = pessoasEntityFactoryForTest.newPessoasEntity();
		when(pessoasJpaRepository.findOne(pessoas.getOidPessoas())).thenReturn(pessoasEntity);

		// When
		Exception exception = null;
		try {
			pessoasService.create(pessoas);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Pessoas pessoas = pessoasFactoryForTest.newPessoas();

		PessoasEntity pessoasEntity = pessoasEntityFactoryForTest.newPessoasEntity();
		when(pessoasJpaRepository.findOne(pessoas.getOidPessoas())).thenReturn(pessoasEntity);
		
		PessoasEntity pessoasEntitySaved = pessoasEntityFactoryForTest.newPessoasEntity();
		when(pessoasJpaRepository.save(pessoasEntity)).thenReturn(pessoasEntitySaved);
		
		Pessoas pessoasSaved = pessoasFactoryForTest.newPessoas();
		when(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntitySaved)).thenReturn(pessoasSaved);

		// When
		Pessoas pessoasResult = pessoasService.update(pessoas);

		// Then
		verify(pessoasServiceMapper).mapPessoasToPessoasEntity(pessoas, pessoasEntity);
		assertTrue(pessoasResult == pessoasSaved);
	}

	@Test
	public void delete() {
		// Given
		Long oidPessoas = mockValues.nextLong();

		// When
		pessoasService.delete(oidPessoas);

		// Then
		verify(pessoasJpaRepository).delete(oidPessoas);
		
	}

}
