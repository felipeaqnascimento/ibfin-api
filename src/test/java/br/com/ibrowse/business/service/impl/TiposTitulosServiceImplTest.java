/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.ibrowse.bean.TiposTitulos;
import br.com.ibrowse.bean.jpa.TiposTitulosEntity;
import br.com.ibrowse.business.service.mapping.TiposTitulosServiceMapper;
import br.com.ibrowse.data.repository.jpa.TiposTitulosJpaRepository;
import br.com.ibrowse.test.MockValues;
import br.com.ibrowse.test.TiposTitulosEntityFactoryForTest;
import br.com.ibrowse.test.TiposTitulosFactoryForTest;

/**
 * Test : Implementation of TiposTitulosService
 */
@RunWith(MockitoJUnitRunner.class)
public class TiposTitulosServiceImplTest {

	@InjectMocks
	private TiposTitulosServiceImpl tiposTitulosService;
	@Mock
	private TiposTitulosJpaRepository tiposTitulosJpaRepository;
	@Mock
	private TiposTitulosServiceMapper tiposTitulosServiceMapper;
	
	private TiposTitulosFactoryForTest tiposTitulosFactoryForTest = new TiposTitulosFactoryForTest();

	private TiposTitulosEntityFactoryForTest tiposTitulosEntityFactoryForTest = new TiposTitulosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long oidTiposTitulos = mockValues.nextLong();
		
		TiposTitulosEntity tiposTitulosEntity = tiposTitulosJpaRepository.findOne(oidTiposTitulos);
		
		TiposTitulos tiposTitulos = tiposTitulosFactoryForTest.newTiposTitulos();
		when(tiposTitulosServiceMapper.mapTiposTitulosEntityToTiposTitulos(tiposTitulosEntity)).thenReturn(tiposTitulos);

		// When
		TiposTitulos tiposTitulosFound = tiposTitulosService.findById(oidTiposTitulos);

		// Then
		assertEquals(tiposTitulos.getOidTiposTitulos(),tiposTitulosFound.getOidTiposTitulos());
	}

	@Test
	public void findAll() {
		// Given
		List<TiposTitulosEntity> tiposTitulosEntitys = new ArrayList<TiposTitulosEntity>();
		TiposTitulosEntity tiposTitulosEntity1 = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		tiposTitulosEntitys.add(tiposTitulosEntity1);
		TiposTitulosEntity tiposTitulosEntity2 = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		tiposTitulosEntitys.add(tiposTitulosEntity2);
		when(tiposTitulosJpaRepository.findAll()).thenReturn(tiposTitulosEntitys);
		
		TiposTitulos tiposTitulos1 = tiposTitulosFactoryForTest.newTiposTitulos();
		when(tiposTitulosServiceMapper.mapTiposTitulosEntityToTiposTitulos(tiposTitulosEntity1)).thenReturn(tiposTitulos1);
		TiposTitulos tiposTitulos2 = tiposTitulosFactoryForTest.newTiposTitulos();
		when(tiposTitulosServiceMapper.mapTiposTitulosEntityToTiposTitulos(tiposTitulosEntity2)).thenReturn(tiposTitulos2);

		// When
		List<TiposTitulos> tiposTitulossFounds = tiposTitulosService.findAll();

		// Then
		assertTrue(tiposTitulos1 == tiposTitulossFounds.get(0));
		assertTrue(tiposTitulos2 == tiposTitulossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TiposTitulos tiposTitulos = tiposTitulosFactoryForTest.newTiposTitulos();

		TiposTitulosEntity tiposTitulosEntity = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		when(tiposTitulosJpaRepository.findOne(tiposTitulos.getOidTiposTitulos())).thenReturn(null);
		
		tiposTitulosEntity = new TiposTitulosEntity();
		tiposTitulosServiceMapper.mapTiposTitulosToTiposTitulosEntity(tiposTitulos, tiposTitulosEntity);
		TiposTitulosEntity tiposTitulosEntitySaved = tiposTitulosJpaRepository.save(tiposTitulosEntity);
		
		TiposTitulos tiposTitulosSaved = tiposTitulosFactoryForTest.newTiposTitulos();
		when(tiposTitulosServiceMapper.mapTiposTitulosEntityToTiposTitulos(tiposTitulosEntitySaved)).thenReturn(tiposTitulosSaved);

		// When
		TiposTitulos tiposTitulosResult = tiposTitulosService.create(tiposTitulos);

		// Then
		assertTrue(tiposTitulosResult == tiposTitulosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TiposTitulos tiposTitulos = tiposTitulosFactoryForTest.newTiposTitulos();

		TiposTitulosEntity tiposTitulosEntity = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		when(tiposTitulosJpaRepository.findOne(tiposTitulos.getOidTiposTitulos())).thenReturn(tiposTitulosEntity);

		// When
		Exception exception = null;
		try {
			tiposTitulosService.create(tiposTitulos);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TiposTitulos tiposTitulos = tiposTitulosFactoryForTest.newTiposTitulos();

		TiposTitulosEntity tiposTitulosEntity = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		when(tiposTitulosJpaRepository.findOne(tiposTitulos.getOidTiposTitulos())).thenReturn(tiposTitulosEntity);
		
		TiposTitulosEntity tiposTitulosEntitySaved = tiposTitulosEntityFactoryForTest.newTiposTitulosEntity();
		when(tiposTitulosJpaRepository.save(tiposTitulosEntity)).thenReturn(tiposTitulosEntitySaved);
		
		TiposTitulos tiposTitulosSaved = tiposTitulosFactoryForTest.newTiposTitulos();
		when(tiposTitulosServiceMapper.mapTiposTitulosEntityToTiposTitulos(tiposTitulosEntitySaved)).thenReturn(tiposTitulosSaved);

		// When
		TiposTitulos tiposTitulosResult = tiposTitulosService.update(tiposTitulos);

		// Then
		verify(tiposTitulosServiceMapper).mapTiposTitulosToTiposTitulosEntity(tiposTitulos, tiposTitulosEntity);
		assertTrue(tiposTitulosResult == tiposTitulosSaved);
	}

	@Test
	public void delete() {
		// Given
		Long oidTiposTitulos = mockValues.nextLong();

		// When
		tiposTitulosService.delete(oidTiposTitulos);

		// Then
		verify(tiposTitulosJpaRepository).delete(oidTiposTitulos);
		
	}

}
