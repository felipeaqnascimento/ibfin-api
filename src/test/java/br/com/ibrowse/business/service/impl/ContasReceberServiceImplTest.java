/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.ibrowse.bean.ContasReceber;
import br.com.ibrowse.bean.jpa.ContasReceberEntity;
import br.com.ibrowse.business.service.mapping.ContasReceberServiceMapper;
import br.com.ibrowse.data.repository.jpa.ContasReceberJpaRepository;
import br.com.ibrowse.test.ContasReceberEntityFactoryForTest;
import br.com.ibrowse.test.ContasReceberFactoryForTest;
import br.com.ibrowse.test.MockValues;

/**
 * Test : Implementation of ContasReceberService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContasReceberServiceImplTest {

	@InjectMocks
	private ContasReceberServiceImpl contasReceberService;
	@Mock
	private ContasReceberJpaRepository contasReceberJpaRepository;
	@Mock
	private ContasReceberServiceMapper contasReceberServiceMapper;
	
	private ContasReceberFactoryForTest contasReceberFactoryForTest = new ContasReceberFactoryForTest();

	private ContasReceberEntityFactoryForTest contasReceberEntityFactoryForTest = new ContasReceberEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long oidContasReceber = mockValues.nextLong();
		
		ContasReceberEntity contasReceberEntity = contasReceberJpaRepository.findOne(oidContasReceber);
		
		ContasReceber contasReceber = contasReceberFactoryForTest.newContasReceber();
		when(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntity)).thenReturn(contasReceber);

		// When
		ContasReceber contasReceberFound = contasReceberService.findById(oidContasReceber);

		// Then
		assertEquals(contasReceber.getOidContasReceber(),contasReceberFound.getOidContasReceber());
	}

	@Test
	public void findAll() {
		// Given
		List<ContasReceberEntity> contasReceberEntitys = new ArrayList<ContasReceberEntity>();
		ContasReceberEntity contasReceberEntity1 = contasReceberEntityFactoryForTest.newContasReceberEntity();
		contasReceberEntitys.add(contasReceberEntity1);
		ContasReceberEntity contasReceberEntity2 = contasReceberEntityFactoryForTest.newContasReceberEntity();
		contasReceberEntitys.add(contasReceberEntity2);
		when(contasReceberJpaRepository.findAll()).thenReturn(contasReceberEntitys);
		
		ContasReceber contasReceber1 = contasReceberFactoryForTest.newContasReceber();
		when(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntity1)).thenReturn(contasReceber1);
		ContasReceber contasReceber2 = contasReceberFactoryForTest.newContasReceber();
		when(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntity2)).thenReturn(contasReceber2);

		// When
		List<ContasReceber> contasRecebersFounds = contasReceberService.findAll();

		// Then
		assertTrue(contasReceber1 == contasRecebersFounds.get(0));
		assertTrue(contasReceber2 == contasRecebersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ContasReceber contasReceber = contasReceberFactoryForTest.newContasReceber();

		ContasReceberEntity contasReceberEntity = contasReceberEntityFactoryForTest.newContasReceberEntity();
		when(contasReceberJpaRepository.findOne(contasReceber.getOidContasReceber())).thenReturn(null);
		
		contasReceberEntity = new ContasReceberEntity();
		contasReceberServiceMapper.mapContasReceberToContasReceberEntity(contasReceber, contasReceberEntity);
		ContasReceberEntity contasReceberEntitySaved = contasReceberJpaRepository.save(contasReceberEntity);
		
		ContasReceber contasReceberSaved = contasReceberFactoryForTest.newContasReceber();
		when(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntitySaved)).thenReturn(contasReceberSaved);

		// When
		ContasReceber contasReceberResult = contasReceberService.create(contasReceber);

		// Then
		assertTrue(contasReceberResult == contasReceberSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ContasReceber contasReceber = contasReceberFactoryForTest.newContasReceber();

		ContasReceberEntity contasReceberEntity = contasReceberEntityFactoryForTest.newContasReceberEntity();
		when(contasReceberJpaRepository.findOne(contasReceber.getOidContasReceber())).thenReturn(contasReceberEntity);

		// When
		Exception exception = null;
		try {
			contasReceberService.create(contasReceber);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ContasReceber contasReceber = contasReceberFactoryForTest.newContasReceber();

		ContasReceberEntity contasReceberEntity = contasReceberEntityFactoryForTest.newContasReceberEntity();
		when(contasReceberJpaRepository.findOne(contasReceber.getOidContasReceber())).thenReturn(contasReceberEntity);
		
		ContasReceberEntity contasReceberEntitySaved = contasReceberEntityFactoryForTest.newContasReceberEntity();
		when(contasReceberJpaRepository.save(contasReceberEntity)).thenReturn(contasReceberEntitySaved);
		
		ContasReceber contasReceberSaved = contasReceberFactoryForTest.newContasReceber();
		when(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntitySaved)).thenReturn(contasReceberSaved);

		// When
		ContasReceber contasReceberResult = contasReceberService.update(contasReceber);

		// Then
		verify(contasReceberServiceMapper).mapContasReceberToContasReceberEntity(contasReceber, contasReceberEntity);
		assertTrue(contasReceberResult == contasReceberSaved);
	}

	@Test
	public void delete() {
		// Given
		Long oidContasReceber = mockValues.nextLong();

		// When
		contasReceberService.delete(oidContasReceber);

		// Then
		verify(contasReceberJpaRepository).delete(oidContasReceber);
		
	}

}
