/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;

import br.com.ibrowse.bean.Pessoas;
import br.com.ibrowse.bean.jpa.PessoasEntity;
import br.com.ibrowse.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class PessoasServiceMapperTest {

	private PessoasServiceMapper pessoasServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		pessoasServiceMapper = new PessoasServiceMapper();
		pessoasServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'PessoasEntity' to 'Pessoas'
	 * @param pessoasEntity
	 */
	@Test
	public void testMapPessoasEntityToPessoas() {
		// Given
		PessoasEntity pessoasEntity = new PessoasEntity();
		pessoasEntity.setNmPessoa(mockValues.nextString(100));
		pessoasEntity.setNrCpfCnpj(mockValues.nextString(14));
		pessoasEntity.setNmCidade(mockValues.nextString(50));
		pessoasEntity.setNmUf(mockValues.nextString(2));
		pessoasEntity.setNrTelefone(mockValues.nextString(11));
		pessoasEntity.setNmContato(mockValues.nextString(100));
		pessoasEntity.setNrEmail(mockValues.nextString(100));
		pessoasEntity.setVrPercDeducaoIrpj(mockValues.nextLong());
		pessoasEntity.setVrPercDeducaoPis(mockValues.nextLong());
		pessoasEntity.setVrPercDeducaoCofins(mockValues.nextLong());
		pessoasEntity.setVrPercDeducaoCsll(mockValues.nextLong());
		pessoasEntity.setVrPercDeducaoInss(mockValues.nextLong());
		pessoasEntity.setVrPercDeducaoIssqn(mockValues.nextLong());
		pessoasEntity.setDsUsuAlter(mockValues.nextString(30));
		pessoasEntity.setDtUltAlter(mockValues.nextDate());
		pessoasEntity.setVsVersao(mockValues.nextLong());
		
		// When
		Pessoas pessoas = pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity);
		
		// Then
		assertEquals(pessoasEntity.getNmPessoa(), pessoas.getNmPessoa());
		assertEquals(pessoasEntity.getNrCpfCnpj(), pessoas.getNrCpfCnpj());
		assertEquals(pessoasEntity.getNmCidade(), pessoas.getNmCidade());
		assertEquals(pessoasEntity.getNmUf(), pessoas.getNmUf());
		assertEquals(pessoasEntity.getNrTelefone(), pessoas.getNrTelefone());
		assertEquals(pessoasEntity.getNmContato(), pessoas.getNmContato());
		assertEquals(pessoasEntity.getNrEmail(), pessoas.getNrEmail());
		assertEquals(pessoasEntity.getVrPercDeducaoIrpj(), pessoas.getVrPercDeducaoIrpj());
		assertEquals(pessoasEntity.getVrPercDeducaoPis(), pessoas.getVrPercDeducaoPis());
		assertEquals(pessoasEntity.getVrPercDeducaoCofins(), pessoas.getVrPercDeducaoCofins());
		assertEquals(pessoasEntity.getVrPercDeducaoCsll(), pessoas.getVrPercDeducaoCsll());
		assertEquals(pessoasEntity.getVrPercDeducaoInss(), pessoas.getVrPercDeducaoInss());
		assertEquals(pessoasEntity.getVrPercDeducaoIssqn(), pessoas.getVrPercDeducaoIssqn());
		assertEquals(pessoasEntity.getDsUsuAlter(), pessoas.getDsUsuAlter());
		assertEquals(pessoasEntity.getDtUltAlter(), pessoas.getDtUltAlter());
		assertEquals(pessoasEntity.getVsVersao(), pessoas.getVsVersao());
	}
	
	/**
	 * Test : Mapping from 'Pessoas' to 'PessoasEntity'
	 */
	@Test
	public void testMapPessoasToPessoasEntity() {
		// Given
		Pessoas pessoas = new Pessoas();
		pessoas.setNmPessoa(mockValues.nextString(100));
		pessoas.setNrCpfCnpj(mockValues.nextString(14));
		pessoas.setNmCidade(mockValues.nextString(50));
		pessoas.setNmUf(mockValues.nextString(2));
		pessoas.setNrTelefone(mockValues.nextString(11));
		pessoas.setNmContato(mockValues.nextString(100));
		pessoas.setNrEmail(mockValues.nextString(100));
		pessoas.setVrPercDeducaoIrpj(mockValues.nextLong());
		pessoas.setVrPercDeducaoPis(mockValues.nextLong());
		pessoas.setVrPercDeducaoCofins(mockValues.nextLong());
		pessoas.setVrPercDeducaoCsll(mockValues.nextLong());
		pessoas.setVrPercDeducaoInss(mockValues.nextLong());
		pessoas.setVrPercDeducaoIssqn(mockValues.nextLong());
		pessoas.setDsUsuAlter(mockValues.nextString(30));
		pessoas.setDtUltAlter(mockValues.nextDate());
		pessoas.setVsVersao(mockValues.nextLong());

		PessoasEntity pessoasEntity = new PessoasEntity();
		
		// When
		pessoasServiceMapper.mapPessoasToPessoasEntity(pessoas, pessoasEntity);
		
		// Then
		assertEquals(pessoas.getNmPessoa(), pessoasEntity.getNmPessoa());
		assertEquals(pessoas.getNrCpfCnpj(), pessoasEntity.getNrCpfCnpj());
		assertEquals(pessoas.getNmCidade(), pessoasEntity.getNmCidade());
		assertEquals(pessoas.getNmUf(), pessoasEntity.getNmUf());
		assertEquals(pessoas.getNrTelefone(), pessoasEntity.getNrTelefone());
		assertEquals(pessoas.getNmContato(), pessoasEntity.getNmContato());
		assertEquals(pessoas.getNrEmail(), pessoasEntity.getNrEmail());
		assertEquals(pessoas.getVrPercDeducaoIrpj(), pessoasEntity.getVrPercDeducaoIrpj());
		assertEquals(pessoas.getVrPercDeducaoPis(), pessoasEntity.getVrPercDeducaoPis());
		assertEquals(pessoas.getVrPercDeducaoCofins(), pessoasEntity.getVrPercDeducaoCofins());
		assertEquals(pessoas.getVrPercDeducaoCsll(), pessoasEntity.getVrPercDeducaoCsll());
		assertEquals(pessoas.getVrPercDeducaoInss(), pessoasEntity.getVrPercDeducaoInss());
		assertEquals(pessoas.getVrPercDeducaoIssqn(), pessoasEntity.getVrPercDeducaoIssqn());
		assertEquals(pessoas.getDsUsuAlter(), pessoasEntity.getDsUsuAlter());
		assertEquals(pessoas.getDtUltAlter(), pessoasEntity.getDtUltAlter());
		assertEquals(pessoas.getVsVersao(), pessoasEntity.getVsVersao());
	}

}