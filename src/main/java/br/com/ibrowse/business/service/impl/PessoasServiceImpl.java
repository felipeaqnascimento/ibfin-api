/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import br.com.ibrowse.bean.Pessoas;
import br.com.ibrowse.bean.jpa.PessoasEntity;
import br.com.ibrowse.business.service.PessoasService;
import br.com.ibrowse.business.service.mapping.PessoasServiceMapper;
import br.com.ibrowse.data.repository.jpa.PessoasJpaRepository;

/**
 * Implementation of PessoasService
 */
@Component
@Transactional
public class PessoasServiceImpl implements PessoasService {

	@Resource
	private PessoasJpaRepository pessoasJpaRepository;

	@Resource
	private PessoasServiceMapper pessoasServiceMapper;
	
	@Override
	public Pessoas findById(Long oidPessoas) {
		PessoasEntity pessoasEntity = pessoasJpaRepository.findOne(oidPessoas);
		return pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity);
	}

	@Override
	public List<Pessoas> findAll() {
		Iterable<PessoasEntity> entities = pessoasJpaRepository.findAll();
		List<Pessoas> beans = new ArrayList<Pessoas>();
		for(PessoasEntity pessoasEntity : entities) {
			beans.add(pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntity));
		}
		return beans;
	}

	@Override
	public Pessoas save(Pessoas pessoas) {
		return update(pessoas) ;
	}

	@Override
	public Pessoas create(Pessoas pessoas) {
		PessoasEntity pessoasEntity = pessoasJpaRepository.findByNrCpfCnpj(pessoas.getNrCpfCnpj());
		if( pessoasEntity != null ) {
			throw new IllegalStateException("Registro j√° existente!");
		}
		pessoasEntity = new PessoasEntity();
		pessoasServiceMapper.mapPessoasToPessoasEntity(pessoas, pessoasEntity);
		PessoasEntity pessoasEntitySaved = pessoasJpaRepository.save(pessoasEntity);
		return pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntitySaved);
	}

	@Override
	public Pessoas update(Pessoas pessoas) {
		PessoasEntity pessoasEntity = pessoasJpaRepository.findOne(pessoas.getOidPessoas());
		pessoasServiceMapper.mapPessoasToPessoasEntity(pessoas, pessoasEntity);
		PessoasEntity pessoasEntitySaved = pessoasJpaRepository.save(pessoasEntity);
		return pessoasServiceMapper.mapPessoasEntityToPessoas(pessoasEntitySaved);
	}

	@Override
	public void delete(Long oidPessoas) {
		pessoasJpaRepository.delete(oidPessoas);
	}

	public PessoasJpaRepository getPessoasJpaRepository() {
		return pessoasJpaRepository;
	}

	public void setPessoasJpaRepository(PessoasJpaRepository pessoasJpaRepository) {
		this.pessoasJpaRepository = pessoasJpaRepository;
	}

	public PessoasServiceMapper getPessoasServiceMapper() {
		return pessoasServiceMapper;
	}

	public void setPessoasServiceMapper(PessoasServiceMapper pessoasServiceMapper) {
		this.pessoasServiceMapper = pessoasServiceMapper;
	}

}
