/*
 * Created on 21 fev 2018 ( Time 15:05:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import br.com.ibrowse.bean.Usuarios;
import br.com.ibrowse.bean.jpa.UsuariosEntity;
import br.com.ibrowse.business.service.UsuariosService;
import br.com.ibrowse.business.service.mapping.UsuariosServiceMapper;
import br.com.ibrowse.data.repository.jpa.UsuariosJpaRepository;
import br.com.ibrowse.dto.InformacoesLoginFinanceiroDTO;
import br.com.ibrowse.dto.InformacoesTokenDTO;
import br.com.ibrowse.dto.LoginFinanceiroDTO;
import br.com.ibrowse.dto.LoginResponseFinanceiroDTO;
import br.com.ibrowse.utils.CriptografiaUtils;
import br.com.ibrowse.utils.UsuarioTokenUtils;
import br.com.ibrowse.business.service.impl.UsuariosServiceImpl;

/**
 * Implementation of UsuariosService
 */
@Component
@Transactional
public class UsuariosServiceImpl implements UsuariosService {

	private static final Logger LOGGER = LoggerFactory.getLogger(UsuariosServiceImpl.class);
	
	@Resource
	private UsuariosJpaRepository usuariosJpaRepository;

	@Resource
	private UsuariosServiceMapper usuariosServiceMapper;
	
	@Override
	public Usuarios findById(Long oidUsuarios) {
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(oidUsuarios);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity);
	}

	@Override
	public List<Usuarios> findAll() {
		Iterable<UsuariosEntity> entities = usuariosJpaRepository.findAll();
		List<Usuarios> beans = new ArrayList<Usuarios>();
		for(UsuariosEntity usuariosEntity : entities) {
			beans.add(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity));
		}
		return beans;
	}

	@Override
	public Usuarios save(Usuarios usuarios) {
		return update(usuarios) ;
	}

	@Override
	public Usuarios create(Usuarios usuarios) {
		UsuariosEntity usuariosEntity;
		if (usuarios.getOidUsuarios() != null) {
			usuariosEntity = usuariosJpaRepository.findOne(usuarios.getOidUsuarios());
			if (usuariosEntity != null) {
				throw new IllegalStateException("already.exists");
			}
		}
		usuarios.setNmUsuario(usuarios.getNmUsuario());
		usuarios.setSenha(usuarios.getSenha());
		usuarios.setNomeCompleto(usuarios.getNomeCompleto());
		usuarios.setEmail(usuarios.getEmail());
		usuarios.setDsUsuAlter("INSERT");
		usuarios.setDtUltAlter(new Date());
		usuarios.setVsVersao(0l);
	
		try {
			usuarios.setSenha(CriptografiaUtils.criptografarSenhaSHA1(usuarios.getSenha()));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		usuariosEntity = new UsuariosEntity();
		usuariosServiceMapper.mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		UsuariosEntity usuariosEntitySaved = usuariosJpaRepository.save(usuariosEntity);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved);
	}

	@Override
	public Usuarios update(Usuarios usuarios) {
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(usuarios.getOidUsuarios());
		usuariosServiceMapper.mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		UsuariosEntity usuariosEntitySaved = usuariosJpaRepository.save(usuariosEntity);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved);
	}

	@Override
	public void delete(Long oidUsuarios) {
		usuariosJpaRepository.delete(oidUsuarios);
	}

	public UsuariosJpaRepository getUsuariosJpaRepository() {
		return usuariosJpaRepository;
	}

	public void setUsuariosJpaRepository(UsuariosJpaRepository usuariosJpaRepository) {
		this.usuariosJpaRepository = usuariosJpaRepository;
	}

	public UsuariosServiceMapper getUsuariosServiceMapper() {
		return usuariosServiceMapper;
	}

	public void setUsuariosServiceMapper(UsuariosServiceMapper usuariosServiceMapper) {
		this.usuariosServiceMapper = usuariosServiceMapper;
	}

	@Override
	public LoginResponseFinanceiroDTO login(LoginFinanceiroDTO loginFinanceiroDTO) {
		LoginResponseFinanceiroDTO loginResponseFinanceiroDTO = new LoginResponseFinanceiroDTO();
		InformacoesLoginFinanceiroDTO informacoesLoginFinanceiroDTO = new InformacoesLoginFinanceiroDTO();
		if (loginFinanceiroDTO != null) {
			if ("".equals(loginFinanceiroDTO.getUsername())) {
				loginResponseFinanceiroDTO.setSucesso(false);
				loginResponseFinanceiroDTO.setMensagem("Login Inv치lido");
				//loginResponseEAutorizaDTO.setValor(null);
				return loginResponseFinanceiroDTO;
			} else if ("".equals(loginFinanceiroDTO.getPassword())) {
				loginResponseFinanceiroDTO.setSucesso(false);
				loginResponseFinanceiroDTO.setMensagem("Senha Inv치lida");
				//loginResponseEAutorizaDTO.setValor(null);
				return loginResponseFinanceiroDTO;
			}

			UsuariosEntity usuario = new UsuariosEntity();
			try {
				String senhaCriptografada = CriptografiaUtils.criptografarSenhaSHA1(loginFinanceiroDTO.getPassword());
				if (usuario != null && usuario.getSenha() != null
						&& usuario.getSenha().equalsIgnoreCase(senhaCriptografada)) {
					loginResponseFinanceiroDTO.setSucesso(true);
					//informacoesLoginEAutorizaDTO.setToken(UsuarioTokenUtils.encode(usuario));
					informacoesLoginFinanceiroDTO.setNmUsuario(usuario.getNmUsuario());
					//informacoesLoginEAutorizaDTO.setOidUsuario(usuario.getOidUsuarios().toString());
					informacoesLoginFinanceiroDTO.setDsEmail(usuario.getEmail());
					loginResponseFinanceiroDTO.setInformacoesUsuario(informacoesLoginFinanceiroDTO);
					
					InformacoesTokenDTO informacoesToken = new InformacoesTokenDTO();
					informacoesToken.setOidUsuario(usuario.getOidUsuarios().toString());
					loginResponseFinanceiroDTO.setToken(UsuarioTokenUtils.encode(informacoesToken));
					loginResponseFinanceiroDTO.setMensagem("Login realizado com sucesso!");
					return loginResponseFinanceiroDTO;
				}
			} catch (Exception e) {
				LOGGER.error("Erro ao tentar criptografar senha informada");
			}
		}
		loginResponseFinanceiroDTO.setSucesso(false);
		loginResponseFinanceiroDTO.setMensagem("Usu치rio e/ou senha inv치lido(s)");
		//loginResponseEAutorizaDTO.setValor(null);
		return loginResponseFinanceiroDTO;
	}

}
