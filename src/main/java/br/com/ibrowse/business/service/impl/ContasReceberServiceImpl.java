/*
 * Created on 23 mai 2017 ( Time 18:19:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.ibrowse.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import br.com.ibrowse.bean.ContasReceber;
import br.com.ibrowse.bean.jpa.ContasReceberEntity;
import br.com.ibrowse.business.service.ContasReceberService;
import br.com.ibrowse.business.service.mapping.ContasReceberServiceMapper;
import br.com.ibrowse.data.repository.jpa.ContasReceberJpaRepository;

/**
 * Implementation of ContasReceberService
 */
@Component
@Transactional
public class ContasReceberServiceImpl implements ContasReceberService {

	@Resource
	private ContasReceberJpaRepository contasReceberJpaRepository;

	@Resource
	private ContasReceberServiceMapper contasReceberServiceMapper;
	
	@Override
	public ContasReceber findById(Long oidContasReceber) {
		ContasReceberEntity contasReceberEntity = contasReceberJpaRepository.findOne(oidContasReceber);
		return contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntity);
	}

	@Override
	public List<ContasReceber> findAll() {
		Iterable<ContasReceberEntity> entities = contasReceberJpaRepository.findAll();
		List<ContasReceber> beans = new ArrayList<ContasReceber>();
		for(ContasReceberEntity contasReceberEntity : entities) {
			beans.add(contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntity));
		}
		return beans;
	}

	@Override
	public ContasReceber save(ContasReceber contasReceber) {
		return update(contasReceber) ;
	}

	@Override
	public ContasReceber create(ContasReceber contasReceber) {
		ContasReceberEntity contasReceberEntity = contasReceberJpaRepository.findOne(contasReceber.getOidContasReceber());
		if( contasReceberEntity != null ) {
			throw new IllegalStateException("Registro j√° existente!");
		}
		contasReceberEntity = new ContasReceberEntity();
		contasReceberServiceMapper.mapContasReceberToContasReceberEntity(contasReceber, contasReceberEntity);
		ContasReceberEntity contasReceberEntitySaved = contasReceberJpaRepository.save(contasReceberEntity);
		return contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntitySaved);
	}

	@Override
	public ContasReceber update(ContasReceber contasReceber) {
		ContasReceberEntity contasReceberEntity = contasReceberJpaRepository.findOne(contasReceber.getOidContasReceber());
		contasReceberServiceMapper.mapContasReceberToContasReceberEntity(contasReceber, contasReceberEntity);
		ContasReceberEntity contasReceberEntitySaved = contasReceberJpaRepository.save(contasReceberEntity);
		return contasReceberServiceMapper.mapContasReceberEntityToContasReceber(contasReceberEntitySaved);
	}

	@Override
	public void delete(Long oidContasReceber) {
		contasReceberJpaRepository.delete(oidContasReceber);
	}

	public ContasReceberJpaRepository getContasReceberJpaRepository() {
		return contasReceberJpaRepository;
	}

	public void setContasReceberJpaRepository(ContasReceberJpaRepository contasReceberJpaRepository) {
		this.contasReceberJpaRepository = contasReceberJpaRepository;
	}

	public ContasReceberServiceMapper getContasReceberServiceMapper() {
		return contasReceberServiceMapper;
	}

	public void setContasReceberServiceMapper(ContasReceberServiceMapper contasReceberServiceMapper) {
		this.contasReceberServiceMapper = contasReceberServiceMapper;
	}

}
